(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{367:function(t,s,r){"use strict";r.r(s);var a=r(14),n=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git-todo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-todo"}},[t._v("#")]),t._v(" Git todo")]),t._v(" "),s("ul",[s("li",[t._v("从锤子笔记迁移而来。20211024晚")])]),t._v(" "),s("h2",{attrs:{id:"基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),s("ol",[s("li",[t._v("优势：版本控制，协同合作。")]),t._v(" "),s("li",[t._v("渊源：由创建Linux的Linus，使用C语言编写了git版本控制系统。")]),t._v(" "),s("li",[t._v("SVN等集中式版本控制系统需要联网，必须有“中央服务器”；Git不需要联网，在局域网内可以互推送版本，大多数也会有“中央服务器”。")]),t._v(" "),s("li",[t._v("安装Git:")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Your Name"')]),t._v("\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"email@example.com"')]),t._v("\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[t._v("创建版本库：\n新建目录："),s("code",[t._v("mkdir learngit")]),s("br"),t._v("\n查看当前目录："),s("code",[t._v("pwd")]),s("br"),t._v("\n通过"),s("code",[t._v("git init")]),t._v("命令把这个目录变成Git可以管理的仓库"),s("br"),t._v("\n用"),s("code",[t._v("ls -ah")]),t._v("可以看到.git文件，它是用来记录git仓库的。"),s("br"),t._v("\n版本控制系统，只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等；图片、视频二进制文件只能知道大小的变化，微软的Word文件也是二进制格式，不要用windows自带记事本编辑程序文件。"),s("br"),t._v("\nreadme.txt 放到仓库目录下")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git add "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\ngit commit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n")])])]),s("p",[t._v("小结："),s("br"),t._v("\n初始化一个Git仓库，使用git init命令。"),s("br"),t._v("\n添加文件到Git仓库，分两步："),s("br"),t._v("\n第一步，使用命令"),s("strong",[t._v("git add 文件名称")]),t._v("，注意，可反复多次使用，添加多个文件；"),s("br"),t._v("\n第二步，使用命令 "),s("strong",[t._v('git commit -m ""')]),t._v(" 完成。")]),t._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[s("p",[t._v("时光机穿梭：\n小结"),s("br"),t._v("\n要随时掌握工作区的状态，使用"),s("code",[t._v("git status")]),t._v("命令。"),s("br"),t._v("\n如果git status告诉你有文件被修改过，用git diff 【在add之前使用】。\n"),s("code",[t._v("git diff")]),t._v("是工作区和 中间区比较，"),s("code",[t._v("git diff --cached")]),t._v("是中间区和仓库比较。"),s("br"),t._v("\nUntracked files 未跟踪文件")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("版本回退"),s("br"),t._v(" "),s("code",[t._v("git log")]),t._v("查看历史记录"),s("br"),t._v(" "),s("code",[t._v("git log --pretty=oneline")]),t._v("用简洁的方式查看历史记录"),s("br"),t._v("\n用HEAD表示当前版本 上个版本就是HEAD^ 上上个版本就是HEAD^^  依次类推"),s("br"),t._v("\n【"),s("code",[t._v("git reflog")]),t._v("用来记录你的每一次命令：】所以可以穿越过来，穿越到现在。"),s("br"),t._v("\n回到以前的某个版本后，想再回来 $ git reset --hard 3628164"),s("br"),t._v("\nGit 回退版本非常快的原因【因为Git在内部有个指向当前版本的HEAD指针】"),s("br"),t._v("\n英文状态下，按q退出git log。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("工作区和暂存区"),s("br"),t._v("\n【理清系统顺序，明确核心概念，最后记死命令】"),s("br"),t._v("\n工作区（Working Directory）—— 版本库（Repository）【暂存区stage,master分支，指针HEAD】"),s("br"),t._v("\n版本库在工作区的一个隐藏目录里 .git"),s("br"),t._v(" "),s("code",[t._v("add是把所有修改放到了暂存区，commit才把暂存区里的所有文件提交到当前分支")]),t._v("。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("管理修改")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("撤销修改"),s("br"),t._v("\n直接丢弃工作区的修改时，用命令git checkout -- file 【--后面有空格,前提是该文件已经被跟踪，如果是新增文件就不行了】"),s("br"),t._v("\n(想丢弃全部修改文件怎么办？) git checkout -- ."),s("br"),t._v("\n添加到了暂存区时，想丢弃修改 命令git reset HEAD file"),s("br"),t._v("\n【三种状态之间的切换】 working stage repository")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"5"}},[s("li",[t._v("删除文件")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("rm file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\ngit checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("txt\n")])])]),s("p",[t._v("其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。"),s("br"),t._v("\n【如果新增文件一次都没有commit到版本库，那么git checkout -- file 是不起作用的】"),s("br"),t._v("\n【纵向的是git log版本历史的回退，横向的是三种状态的回退】")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git reset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("hard commitid    \ngit log、gitreflog\nrm file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name    git checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" file    git reset "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" file \n")])])])])])]),t._v(" "),s("li",[s("p",[t._v("远程仓库"),s("br"),t._v("\n杀手级功能--远程仓库，其实在一台电脑上是可以克隆多个版本库的。"),s("br"),t._v("\n本地仓库和github远程仓库是通过SSH加密传输的"),s("br"),t._v("\n创建SSH key:"),s("code",[t._v('ssh-keygen -t rsa -C "youremail@example.com"')]),t._v("\n可以自己在自己的服务器上搭建git服务器，很简单，公司内部开发必备。"),s("br"),t._v("\nVim file.name 是打开某个文件"),s("br"),t._v("\n【测试：ssh git@github.com】"),s("br"),t._v("\n【①Github远程仓库添加公钥后，只是识别这台电脑了，② git remote add origin git@github.com:001chinaneil/02githubStudy.git  (这是仓库建立了链接)"),s("br"),t._v("\n在远程新建一个仓库，并在本地执行上述代码，然后git push -u origin master"),s("br"),t._v("\n这才完成了全部连接操作。默认第一个分支是master分支。在github新建一个仓库后，会有提示后续操作】"),s("br"),t._v("\n如果本地仓库已经有提交的记录，而远程仓库也有文件，在建立连接之后，需要使用"),s("br"),t._v("\ngit pull --rebase origin master 【把远程仓库文件和本地仓库文件进行合并】"),s("br"),t._v("\n（待梳理）仓库下各分支与远程各分支的一一对应关系的建立"),s("br"),t._v("\n（待梳理）不在网页远程库，而是在本地命令行新建个仓库的方法，新建分支"),s("br"),t._v("\n[新方式]：【本地新建好仓库后，远程新建仓库，什么文件也不建，会有引导的，这样"),s("br"),t._v("\ngit remote add origin git@github.com:001chinaneil/07nuxt_demo.git"),s("br"),t._v("\ngit push -u origin master\n就OK了。】")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("添加远程库")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("从远程库克隆"),s("br"),t._v("\ngit clone git@github.com:001chinaneil/02gitskills.git"),s("br"),t._v("\n从远程克隆仓库会把文件目录都克隆出来的，并自动在本地初始化仓库。")])])])])]),t._v(" "),s("li",[s("p",[t._v("分支管理"),s("br"),t._v("\nGit的分支就像是平行的宇宙，互相不影响的。创建，切换，删除都很快。")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("创建与合并分支"),s("br"),t._v("\nHEAD指向分支（master），分支（master）指向提交。"),s("br"),t._v("\n创建并切换分支：git checkout -b 分支.name  [== git branch 分支.name + git checkout 分支.name]"),s("br"),t._v("\ngit merge 分支.name 用于合并指定分支到当前分支。"),s("br"),t._v("\n删除分支：git branch -d 分支.name")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("解决冲突"),s("br"),t._v("\n以下命令可以查看分支合并情况"),s("br"),t._v("\n$ git log --graph --pretty=oneline --abbrev-commit")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("分支管理策略"),s("br"),t._v("\nmaster充当发布分支，不在上面干活儿，在其他分支开发。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("Bug分支："),s("br"),t._v("\nGit提供了“储藏”功能，git stash把当前工作区储存起来；"),s("br"),t._v("\ngit stash list 查看储存的列表；"),s("br"),t._v("\n恢复工作区："),s("br"),t._v("\n方法一：git stash apply 恢复后，stash内容并不删除，还需git stash drop来删除"),s("br"),t._v("\n方法二：git stash pop 恢复并删除了stash内容"),s("br"),t._v("\n（恢复并删除不是最近的一个stash，是 git stash pop stash@{2}吗？"),s("br"),t._v("\n多次stash后，用git stash apply stash@{0} 来恢复指定的stash。"),s("br"),t._v("\n【使用stash功能首页该文件要在被跟踪的前提下，即至少一次的add后；在add后，commit前就可以使用stash功能；git stash list列表里按stash时间线倒排序，0是最近的一次stash。】"),s("br"),t._v("\n实验：在1分支stash，那么在2分支stash pop会把暂存的释放出来吗？会，会把1分支的状态全部带到2分支里面去，也就是说stash功能不分分支的。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"5"}},[s("li",[t._v("Feature分支"),s("br"),t._v("\n开发新功能最好新建一个分支，然后合并到主分支上，删除一个没有被合并的分支，需要使用强制删除 git branch -D 分支.name")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"6"}},[s("li",[t._v("多人协作"),s("br"),t._v("\n查看远程库信息，使用git remote -v；"),s("br"),t._v("\n本地新建的分支如果不推送到远程，对其他人就是不可见的；"),s("br"),t._v("\n从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；"),s("br"),t._v("\n在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；（如果远程没有这个分支呢？这个命令会创建吗？）"),s("br"),t._v("\n建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；"),s("br"),t._v("\n从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。"),s("br"),t._v("\n实验：在1分支本地可以推送代码到2分支远程吗？"),s("br"),t._v("\n1）在远程仓库新建分支？"),s("br"),t._v("\n可以在远程库里面可视化手动新建分支，或者在本地git checkout -b 新分支.name ，并git push origin 新分支.name，这样远程仓库就多了一个新分支"),s("br"),t._v("\n2）一旦本地分支和远程某分支建立连接关系，本地分支的修改是不能push到其他远程分支去的。同理，pull也不会。本地当前在哪个分支就会把远程哪个对应的分支pull下来，其他的分支不会pull下来。"),s("br"),t._v("\n（待梳理）本地 git pull 会把其他人新建的分支pull下来是怎么回事儿？")])])])])]),t._v(" "),s("li",[s("p",[t._v("标签管理"),s("br"),t._v("\nTag就是一个有意义的名字，它和某个commit绑定在一起。")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("创建标签"),s("br"),t._v("\n1）切换到需要打标签的分支上：$ git tag v1.0"),s("br"),t._v('\n2）创建带有说明的标签：$ git tag -a v0.1 -m "version 0.1 released" 3628164  -a代表版本号，-m代表说明文字'),s("br"),t._v("\n标签默认是打在最近一次commit上的，如果想打在以前的某个commit上：$ git tag v0.9 6224937"),s("br"),t._v("\n3）查看所有标签：$ git tag"),s("br"),t._v("\ngit tag是按字母顺序排列，而不是按时间顺序排列。"),s("br"),t._v("\n4）用"),s("strong",[t._v("git show 标签名称")]),t._v("查看标签信息。"),s("br"),t._v('\n(没理解)**git tag -s 标签名称 -m "blablabla..."**可以用PGP签名标签。')])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("操作标签"),s("br"),t._v("\n1）推送标签到远程：git push origin v0.1  一次性推送所有标签：git push origin --tags"),s("br"),t._v("\n2）删除本地标签：git tag -d v0.1"),s("br"),t._v("\n3）删除远程标签：先删除本地标签，在删除远程标签：git push origin :refs/tags/v0.1")])])])])]),t._v(" "),s("li",[s("p",[t._v("使用GitHub"),s("br"),t._v("\n参与开源项目："),s("br"),t._v("\n1）到开源项目主页，fork"),s("br"),t._v("\n2）从自己的仓库下克隆项目"),s("br"),t._v("\n3）自己本地修改，提交，然后向开源项目发起一个pull request。一旦通过，自己的修改就被开源项目使用了。"),s("br"),t._v("\nfork后是在远程新建了一个仓库，自己clone也是在本地新建一个仓库。"),s("br"),t._v("\n（疑问）在自己开发期间，别人的提交代码通过了，自己怎么获取最新的代码。")])]),t._v(" "),s("li",[s("p",[t._v("使用码云"),s("br"),t._v("\n查看远程库信息：git remote -v"),s("br"),t._v("\n删除已关联的名为origin的远程库：git remote rm origin"),s("br"),t._v("\n本地连接远程库：git remote add origin git@gitee.com:liaoxuefeng/learngit.git"),s("br"),t._v("\n(问题)使用码云过程中，在本地编写的汉字，上传后，看到的是乱码。"),s("br"),t._v("\n实现：一个本地库同时同步两个远程仓库 [一对多的关系]"),s("br"),t._v("\n方案：git默认给远程起的名称是origin，如果同步两个就要用不同的远程名称来区分。"),s("br"),t._v("\n第一步：先删除对远程库的连接 git remote rm origin"),s("br"),t._v("\n第二步：用不同的远程库名字来指定不同的远程仓库"),s("br"),t._v("\ngit remote add github git@github.com:001chinaneil/02githubStudy"),s("br"),t._v("\ngit remote add gitee git@gitee.com:zhangguobiao/learngitee"),s("br"),t._v("\n第三步：使用 git push github master   ;    git push gitee master"),s("br"),t._v("\n(疑问)一对多的关系不用分支匹配连接吗？gitee起码没用到"),s("br"),t._v("\n总结：新建仓库，新建分支 仓库底下是分支")])]),t._v(" "),s("li",[s("p",[t._v("自定义Git"),s("br"),t._v("\n让Git显示颜色：git config --global color.ur true"),s("br"),t._v("\n[代码就是某些目录下的一些文件，用PHP路由连接起来，再放到服务器上，注册个域名，把IP和命名绑定号，然后大家就可以全网观看了]")])])]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("忽略特殊文件"),s("br"),t._v("\n1）新建.gitignore文件"),s("br"),t._v("\n2）某文件被忽略，想放到git中:  "),s("strong",[t._v("git add -f file.name")]),s("br"),t._v("\n3）查找gitignore的问题：git check-gitignore -v file.name"),s("br"),t._v("\n4）touch .gitignore 在命令行里新建.gitignore文件"),s("br"),t._v("\n5）git status是检验文件是否被忽略的标准。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("配置别名"),s("br"),t._v("\ngit config --global alias.st status (用st代表status)"),s("br"),t._v("\n当前仓库配置文件放在了 .git/config中"),s("br"),t._v("\n打开文件：cat .git/config"),s("br"),t._v("\n（待梳理）当前用户（全局配置文件） 在主目录的 .gitconfig文件下（并没有打开全局配置项）")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("搭建Git服务器")])])])]),t._v(" "),s("p",[t._v("(复习)git stash使用：http://www.cnblogs.com/tocy/p/git-stash-reference.html")]),t._v(" "),s("h2",{attrs:{id:"节点总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#节点总结"}},[t._v("#")]),t._v(" 节点总结")]),t._v(" "),s("ol",[s("li",[t._v("检查修改："),s("br"),t._v("\n已修改，未暂存：git diff"),s("br"),t._v("\n已暂存，未提交：git diff --cached"),s("br"),t._v("\n已提交，未推送：git diff master origin/master")]),t._v(" "),s("li",[t._v("撤销修改"),s("br"),t._v("\n已修改，未暂存：git checkout .  或者  git reset --hard"),s("br"),t._v("\n已暂存，未提交："),s("br"),t._v("\n（git reset   +  git checkout .）  或者  （git reset --hard）"),s("br"),t._v("\n已提交，未推送：git reset --hard origin/master"),s("br"),t._v("\n已推送：git reset --hard HEAD^  +  git push -f(强制push到远程)")]),t._v(" "),s("li",[t._v("查看当前目录下，所有显示和隐藏的文件 ls -a"),s("br"),t._v("\n删除文件：rm -rf filename")]),t._v(" "),s("li",[t._v("新建仓库和新建分支"),s("br"),t._v("\n直接在github上新建仓库，拉取下来本地就有了新仓库；在GitHub新建分支，本地拉取一下，分支就也下来了。")]),t._v(" "),s("li",[t._v("本地和远程不同的项目合并："),s("br"),t._v("\n假如我们的源是origin，分支是master，那么我们 需要这样写git pull origin master --allow-unrelated-histories")]),t._v(" "),s("li",[t._v("stash应用："),s("br"),t._v('\n添加改动到stash:  git stash save -a "messeag"  (包括了新添加的文件)'),s("br"),t._v("\n删除stash:  git stash drop <stash@{id}> ;    git  stash clear  (stash list全部被删除了)")]),t._v(" "),s("li",[t._v("建立与本地分支相对应的远程分支：git push --set-upstream origin article_addVideo")])]),t._v(" "),s("h2",{attrs:{id:"实践-多git账号对多个git服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实践-多git账号对多个git服务器"}},[t._v("#")]),t._v(" 实践：多Git账号对多个Git服务器")]),t._v(" "),s("p",[t._v("20220410晚 铭科苑F6")]),t._v(" "),s("ul",[s("li",[t._v("参链："),s("br"),t._v(" "),s("a",{attrs:{href:"https://www.cnblogs.com/popfisher/p/5731232.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git多账号配置，同一电脑多个ssh-key的管理"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/qq_38041873/article/details/122874895",target:"_blank",rel:"noopener noreferrer"}},[t._v("同一台电脑配置多个git公钥"),s("OutboundLink")],1)])]),t._v(" "),s("ol",[s("li",[t._v("新建多个公钥/私钥\n"),s("ul",[s("li",[s("ol",[s("li",[t._v("创建ssh-key：")])])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建命令。这里创建两个。~/.ssh/id_rsa中的id_rsa为文件名。默认id_rsa")]),t._v("\nssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("keygen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("t rsa "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"您的邮箱"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("id_rsa\nssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("keygen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("t rsa "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"您的邮箱"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("xct_rsa\n")])])]),s("ul",[s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("ssh-add添加私钥")])])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("ssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("add "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("id_rsa\nssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("add "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("xct_rsa\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查看是否添加成功命令：ssh-add -l")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("配置config文件，来控制公钥对应的Git服务器")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建文件")]),t._v("\ntouch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("config\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后在里面写入：")]),t._v("\n# Host 为域名别名\n# Hostname 真实地址\n# User 用户名\n# IdentityFile rsa的地址\n# PreferredAuthentications 认证方式（publickey"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("公钥的方式）\n\n# 账号"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("github\n   Host github"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\n   Hostname github"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\n   IdentityFile "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("xct_rsa\n   PreferredAuthentications publickey\n\n# 账号"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("参考账号"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("即可\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("注意事项")])]),t._v(" "),s("ul",[s("li",[t._v("Host的命名会影响到命令，比如Host为"),s("code",[t._v("workgithub.com")]),t._v("，那clone时要为"),s("code",[t._v("git clone git@workgithub:xxxxxx")])])]),t._v(" "),s("h2",{attrs:{id:"批量删除分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#批量删除分支"}},[t._v("#")]),t._v(" 批量删除分支")]),t._v(" "),s("p",[t._v("20230612上午 晴 新华科技大厦")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" grep "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CRM'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" xargs git branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v("\n")])])]),s("ol",[s("li",[t._v("**|**是管道符，把各个git命令链接起来")]),t._v(" "),s("li",[s("strong",[t._v("grep")]),t._v("是搜索过滤命令，可以正则匹配")]),t._v(" "),s("li",[s("strong",[t._v("xargs")]),t._v("是参数传递命令，把上个命令的输出结果传递给下一个命令"),s("br"),t._v(" "),s("a",{attrs:{href:"https://www.fke6.com/html/5W08PW4SAD59.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("参链"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"变基rebase操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变基rebase操作"}},[t._v("#")]),t._v(" 变基rebase操作")]),t._v(" "),s("p",[t._v("20230721上午 中雨 新华科技大厦")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/xinmengwuheng/p/11301657.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("参链"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" git rebase "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("xxx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commitId，从此commitId以上进行变基合并，但不包括此commitId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -i 代表进行交互式操作")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 常见命令：\np "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pick 提交\ns "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" squash 和上一个提交进行融合\nr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reword 使用提交，但修改提交说明\nf "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 类似于s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 但丢弃提交说明日志\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v(" \ngit push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f 提交本地代码到远端，只一个人开发的时候可用；\ngit push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("force"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("lease origin "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("xxx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("分支名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("推荐"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 会进行检查，如果有其他人在此分支提交，会进行警告提示，推荐此用法，相对安全一些。\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);